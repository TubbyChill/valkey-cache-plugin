// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  pluginLogs    PluginLog[]
  apiKeys       ApiKey[]

  @@index([email])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?
}

model PluginLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  siteUrl     String
  eventType   String
  eventData   Json
  status      String
  
  @@index([userId])
  @@index([eventType])
  @@index([status])
  @@index([created_at])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  isActive    Boolean  @default(true)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime?

  @@index([userId])
  @@index([key])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?
}

model Page {
  id            String         @id @default(uuid())
  slug          String        @unique
  translations  Translation[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  @@index([slug])
}

model Translation {
  id        String    @id @default(uuid())
  pageId    String
  page      Page      @relation(fields: [pageId], references: [id])
  locale    String
  title     String
  content   String    @db.Text
  metaTitle String?
  metaDesc  String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([pageId, locale])
  @@index([pageId])
  @@index([locale])
}

model DeployLog {
  id        String   @id @default(uuid())
  version   String
  commit    String?
  message   String?
  createdAt DateTime @default(now())

  @@index([createdAt])
}

enum Role {
  ADMIN
  CUSTOMER
  GUEST
} 